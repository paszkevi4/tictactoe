{"version":3,"sources":["components/Square.js","components/Board.js","components/ScoreBoard.js","components/ScoreHolder.js","components/Game.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Square","onClick","value","className","Board","squares","map","square","i","key","ScoreBoard","restart","returnMove","winner","draw","concede","xIsNext","player","Button","variant","Score","count","useState","name","setName","prompt","Game","Array","fill","history","setHistory","step","setStep","setXIsNext","countX","setCountX","countO","setCountO","lines","length","a","b","c","calculateWinner","setDraw","useEffect","current","slice","newHistory","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a14667d.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../style.sass'\r\n\r\nconst Square = ({ onClick, value }) => (\r\n    <button className='square' onClick={onClick}>\r\n        {value}\r\n    </button>\r\n)\r\n\r\nexport default Square","import React from 'react'\r\nimport '../style.sass'\r\nimport Square from './Square'\r\n\r\nconst Board = ({onClick, squares}) => (\r\n    <div className='board'>\r\n        {squares.map( (square, i) => {\r\n                return <Square key={i} value={square} onClick={() => onClick(i)} />\r\n        })}\r\n    </div>\r\n)\r\n\r\nexport default Board","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Button from 'react-bootstrap/Button'\r\nimport '../style.sass'\r\n\r\nexport const ScoreBoard = ({restart, returnMove, winner, draw, concede, xIsNext, player}) => {\r\n    return (\r\n        <div className={'controllers' + ' ' + `${player ? player : ' '}`} >\r\n            <div className='controllerButtons'>\r\n                {winner\r\n                    ? <Button variant=\"success\" onClick={() => restart()}>next round</Button>\r\n                    : draw\r\n                        ? <Button variant=\"success\" onClick={() => restart()}>next round</Button>\r\n                        : <Button variant=\"primary\" onClick={!player === xIsNext ? () => returnMove() : null}>return move</Button>\r\n                }\r\n                <Button variant=\"danger\" onClick={  () => concede() }>Concede</Button>\r\n            </div>\r\n            {player === 'X'\r\n                ? <div className='controllerVictory'>\r\n                    {winner\r\n                        ? winner == player\r\n                            ? <div className='controllerVictoryWin'>WIN</div>\r\n                            : <div className='controllerVictoryLose'>LOSE</div>\r\n                        : null\r\n                    }\r\n                </div>\r\n                : <div className='controllerVictory'>\r\n                    {winner\r\n                        ? winner == player\r\n                            ? <div className='controllerVictoryWinO'>WIN</div>\r\n                            : <div className='controllerVictoryLoseO'>LOSE</div>\r\n                        : null\r\n                    }\r\n                </div>\r\n            }\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport '../style.sass'\r\n\r\nconst Score = ({player, count}) => {\r\n    let [name, setName] = useState(null)\r\n    return (\r\n        <>\r\n            <div className='scoreName' onClick={() => setName(prompt())}><p>{name\r\n                ? player ? name + ' plays for X' : name + ' plays for O'\r\n                : 'Set your name'}</p></div>\r\n            <div className='scoreCount'><p>{count}</p></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Score","import React, {useState, useEffect} from 'react'\r\nimport '../style.sass'\r\nimport { calculateWinner } from '../helpers'\r\nimport Board from './Board'\r\nimport {ScoreBoard} from './ScoreBoard'\r\nimport Score from './ScoreHolder'\r\n\r\n\r\n\r\nconst Game = () => {\r\n\r\n    let [history, setHistory] = useState([Array(9).fill(null)])\r\n    let [step, setStep] = useState(0)\r\n    let [xIsNext, setXIsNext] = useState(true)\r\n\r\n    let [winners, setWinners] = useState([])\r\n    let [countX, setCountX] = useState(0)\r\n    let [countO, setCountO] = useState(0)\r\n    //check if there is winner for every move\r\n    const winner = calculateWinner(history[step])\r\n    let [draw, setDraw] = useState(false)\r\n    //score setter\r\n    useEffect (() => {\r\n        if (winner == 'X') {\r\n            setCountX(++countX)\r\n            setXIsNext(true)\r\n        }\r\n        if (winner == 'O') {\r\n            setCountO(++countO)\r\n            setXIsNext(false)\r\n        }\r\n    }, [winner])\r\n\r\n    //display X or O depending on click\r\n    const handleClick = (i) => {\r\n        const current = history.slice(0, step+1)\r\n        const newHistory = [...current[step]]\r\n        if (winner || newHistory[i]) return\r\n        newHistory[i] = xIsNext ? 'X' : 'O'\r\n        setHistory([...current, newHistory])\r\n        setStep(current.length)\r\n        setXIsNext(!xIsNext)\r\n        if (history.length === 9) {\r\n            setDraw(true)\r\n            setCountX(++countX)\r\n            setCountO(++countO)\r\n        }\r\n    }\r\n\r\n    //revents last step\r\n    const returnMove = () => {\r\n        setStep(step > 0 ? --step : step)\r\n        setXIsNext(!xIsNext)\r\n    }\r\n\r\n    //clears board, gives your opponent a point\r\n    const Xconceded = () => {\r\n        setCountO(++countO)\r\n        restart()\r\n    }\r\n    const Oconceded = () => {\r\n        setCountX(++countX)\r\n        restart()\r\n    }\r\n\r\n    //clears the bord\r\n    const restart = () => {\r\n        setHistory([Array(9).fill(null)])\r\n        setDraw(false)\r\n        setStep(0)\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            {/*<p>{winner ? 'The winner is ' + winner : 'Next player is: ' + (xIsNext ? 'X' : 'O' )}</p>\r\n            <button onClick={() => console.log(step, draw)}>123</button>*/}\r\n            <div className='score score--O'>\r\n                <Score count={countO} />\r\n            </div>\r\n            <div className='score score--X'>\r\n                <Score count={countX} player={'X'} />\r\n            </div>\r\n            <Board squares={history[step]} onClick={handleClick}/>\r\n            <ScoreBoard winner={winner} draw={draw} returnMove={returnMove}\r\n                        restart={restart} concede={Oconceded} xIsNext={xIsNext} player={'O'} />\r\n            <ScoreBoard winner={winner} draw={draw} returnMove={returnMove}\r\n                        restart={restart} concede={Xconceded} xIsNext={xIsNext} player={'X'} />\r\n\r\n            {/*<div className='scoreBoard'>\r\n                <ScoreBoard name={'O'} restart={restart} returnMove={returnMove}\r\n                            count={countO} winner={winner} draw={draw} concede={Oconceded}/>\r\n            </div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","export const calculateWinner = (squares) => {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ]\r\n    for ( let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i]\r\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n            return squares[a]\r\n        }\r\n    }\r\n    return null\r\n}","import React from 'react'\nimport './style.sass'\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}